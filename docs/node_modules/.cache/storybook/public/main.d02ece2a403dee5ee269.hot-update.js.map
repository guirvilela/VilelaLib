{"version":3,"file":"main.d02ece2a403dee5ee269.hot-update.js","mappingssources":["webpack://@hubert/docs/./src/1-guide/testing/4.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Funções\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Testar funções com Jest\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"Vamos testar o fechamento de um modal ao clicar em cancelar\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubModal\\r\\n  opened={formModalStatus.value.modal}\\r\\n  data-testid=\\\"my-component-testid\\\"\\r\\n  header={t('my-component_modal-header')}\\r\\n  width={file ? '70vw' : '40vw'}\\r\\n  contentHeight=\\\"92vh\\\"\\r\\n  onClose={() => formModalStatus.setAll({ modal: false })}\\r\\n  actions={\\r\\n    <HubGrid row cols={['4', '4', '4']}>\\r\\n      <div />\\r\\n      <HubButton\\r\\n        full\\r\\n        variant=\\\"ghost\\\"\\r\\n        onClick={() => formModalStatus.setAll({ modal: false })}\\r\\n      >\\r\\n        {t('reuse_cancel')}\\r\\n      </HubButton>\\r\\n    </HubGrid>\\r\\n  }\\r\\n/>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('Should be able close modal when click on cancel button', () => {\\r\\n  const closeModalBtnMock = jest.fn();\\r\\n\\r\\n  const { getByText } = renderComponent({\\r\\n    formModalStatus: useFormMock<MyComponentStatus>({\\r\\n      value: {\\r\\n        modal: true\\r\\n      },\\r\\n      spySetAll: closeModalBtnMock\\r\\n    })\\r\\n  });\\r\\n\\r\\n  const modalCloseBtn = getByText('reuse_cancel');\\r\\n\\r\\n  fireEvent.click(modalCloseBtn);\\r\\n\\r\\n  expect(closeModalBtnMock).toHaveBeenCalledWith({ modal: false });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 34,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 34,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Explicação\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 55,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"prmeiro criamos uma variavel que vai ser a função que vamos chamar e observar se ela foi chamada no expect()\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 57,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 57,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const closeModalBtnMock = jest.fn();`\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 59,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 59,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Setamos as variaveis necessárias para o modal abrir\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 63,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: \"Passamos a função que será chamada no componente dentro da função, no caso formModalStatus.setAll(), então colocamos spySetAll: closeModalBtnMock, para observarmos se closeModalBtnMock vai ser chamada\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 64,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 63,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const { getByText } = renderComponent({\\r\\n  formModalStatus: useFormMock<MyComponentStatus>({\\r\\n    value: {\\r\\n      modal: true\\r\\n    },\\r\\n    spySetAll: closeModalBtnMock\\r\\n  })\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 66,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 66,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Pegamos através do texto do botão, o elemento de botão que será clicado e ao clicar, executar a função\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 77,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 77,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const modalCloseBtn = getByText('reuse_cancel');\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 79,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 79,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Usamos a função fireEvent.click(), para executar um clique no botão, passando por parâmetro, o botão que queremos clicar\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 83,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 83,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"fireEvent.click(modalCloseBtn);\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 85,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 85,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Por Final esperamos que a função closeModalBtnMock, seja chamada pelo clique do botão e esperamos que tenha chamado com modal: false do jeito que o index.tsx necessita\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 89,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 89,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"expect(closeModalBtnMock).toHaveBeenCalledWith({ modal: false });\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 91,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 91,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Funções', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}