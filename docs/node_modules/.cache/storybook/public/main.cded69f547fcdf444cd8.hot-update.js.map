{"version":3,"file":"main.cded69f547fcdf444cd8.hot-update.js","mappingssources":["webpack://@hubert/docs/./src/1-guide/11-testing.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    img: \"img\",\n    h2: \"h2\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Testing\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Utilizamos essa seção para compartilhar conhecimento sobre desenvolvimento de testes.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Padrão Test ID para capturar elementos\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.img, {\n        src: \"/assets/img/guide-testing-testid.png\",\n        alt: \"testid pattern\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Estrutura inicial do teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Substitua onde está \", _jsxDEV(_components.em, {\n        children: \"Component\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 21\n      }, this), \" para seu componente\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Selecione Component, aperte CTRL + D até todos textos tiverem selecionados e cole o nome do component\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 17,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useActionMock } from '@hubert/http';\\r\\nimport { I18nProvider } from '@hubert/i18n';\\r\\nimport { wrapse } from '@hubert/shared';\\r\\nimport { ThemeProvider } from '@hubert/styles';\\r\\nimport { render } from '@testing-library/react';\\r\\nimport { Component } from '.';\\r\\n\\r\\ntype ComponentProps = React.ComponentProps<typeof Component>;\\r\\n\\r\\ndescribe('DetalhesPagamentoTabsFiles component', () => {\\r\\n  const defaultProps: ComponentProps = {\\r\\n    hasContasPagar: false,\\r\\n    onChangeTabs: jest.fn(),\\r\\n    pagamentosAction: useActionMock(),\\r\\n    tab: 0,\\r\\n    children: ''\\r\\n  };\\r\\n\\r\\n  const renderComponent = (props?: Partial<ComponentProps>) => {\\r\\n    return render(<Component {...defaultProps} {...props} />, {\\r\\n      wrapper: wrapse(ThemeProvider, I18nProvider)\\r\\n    });\\r\\n  };\\r\\n\\r\\n  it('matches snapshot', () => {\\r\\n    const { asFragment } = renderComponent();\\r\\n    expect(asFragment()).toMatchSnapshot();\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 19,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 19,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Comandos para testar os componentes\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"1. Atualizar e executar todos os testes do projeto.\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 53,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 53,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Atualiza os snapshots dos testes existentes. Útil quando você tem mudanças intencionais na interface ou no comportamento do componente e quer refletir essas mudanças nos testes de snapshot.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 55,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"  npm run test:update\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 57,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 57,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"2. Executa os teste e deixa em modo observação.\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 61,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 61,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"O teste é reexecutado automaticamente sempre que há mudanças no código. Ideal para desenvolvimento contínuo e iterações rápidas.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 63,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"  npm run test:watch\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 65,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 65,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"2.1 Executar num arquivo específico\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 69,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 69,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Ao executar uma pasta específica, evita de ficar testando outros componentes.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 71,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"npm run test:watch -- --coverage /src/components/financeiro-page/detalhes-pagamentos-page/detalhe-pagamento-modal-add-arquivo\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 73,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 73,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"3. Execução de Testes Otimizada para Integração Contínua\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 77,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 77,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Ele desativa a geração de alguns arquivos de relatório, priorizando a eficiência no processo de testes. Além disso, ao identificar uma falha em algum teste, o Jest interrompe imediatamente a execução e retorna um sinal de erro, fazendo com que o agente de CI trave o pipeline, evitando que o processo continue em caso de falhas críticas.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 79,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"  npm run test:ci\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 81,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 81,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"4. Execução de Testes que falharam\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 85,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 85,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"  npm run test:fails\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 87,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 87,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"5. Update de Testes que falharam\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 91,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 91,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        children: \"  npm run test:update:fails\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 93,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 93,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.hr, {}, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 97,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Estruturas de pastas\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 99,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 99,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Abrir o Coverage\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 101,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 101,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"O primeiro teste\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 103,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 103,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.hr, {}, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 105,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Keep calm and code on 🤘.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 107,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}