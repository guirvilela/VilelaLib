{"version":3,"file":"main.67ddea896e2996186224.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA","sources":["webpack://@hubert/docs/./src/1-guide/11-testing.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    img: \"img\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Guia de Testes\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Esta seção compartilha boas práticas e orientações sobre como realizar testes de componentes em nosso projeto.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Padrão Test ID para Capturar Elementos\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Utilizamos \", _jsxDEV(_components.strong, {\n        children: \"Test IDs\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 12\n      }, this), \" para facilitar a seleção e o teste de elementos. Abaixo, temos um exemplo do padrão de uso:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.img, {\n        src: \"/assets/img/tests-guide/guide-testing-testid.png\",\n        alt: \"Padrão Test ID\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Estrutura Inicial de um Teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Substitua \", _jsxDEV(_components.code, {\n        children: \"Component\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 11\n      }, this), \" pelo nome do seu componente. Aqui estão as etapas:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 17,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ol, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Selecionando o Componente\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 19,\n            columnNumber: 4\n          }, this), \": Selecione o nome do componente, aperte \", _jsxDEV(_components.code, {\n            children: \"CTRL + D\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 19,\n            columnNumber: 74\n          }, this), \" até todos os textos estarem selecionados e cole o nome correto do componente.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 19,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 19,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Ajustando a Tipagem\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 21,\n            columnNumber: 4\n          }, this), \": Se ocorrer erro no \", _jsxDEV(_components.code, {\n            children: \"ComponentProps\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 21,\n            columnNumber: 48\n          }, this), \", altere a tipagem para o tipo do seu componente, que pode ser encontrado no arquivo \", _jsxDEV(_components.code, {\n            children: \"index.tsx\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 21,\n            columnNumber: 149\n          }, this), \".\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 21,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 21,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 19,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Aqui está um exemplo de como configurar um teste básico para seu componente:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 23,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useActionMock } from '@hubert/http';\\r\\nimport { I18nProvider } from '@hubert/i18n';\\r\\nimport { wrapse } from '@hubert/shared';\\r\\nimport { ThemeProvider } from '@hubert/styles';\\r\\nimport { render } from '@testing-library/react';\\r\\nimport { Component } from '.';\\r\\n\\r\\ntype ComponentProps = React.ComponentProps<typeof Component>;\\r\\n\\r\\ndescribe('DetalhesPagamentoTabsFiles component', () => {\\r\\n  const defaultProps: ComponentProps = {};\\r\\n\\r\\n  const renderComponent = (props?: Partial<ComponentProps>) => {\\r\\n    return render(<Component {...defaultProps} {...props} />, {\\r\\n      wrapper: wrapse(ThemeProvider, I18nProvider)\\r\\n    });\\r\\n  };\\r\\n\\r\\n  it('matches snapshot', () => {\\r\\n    const { asFragment } = renderComponent();\\r\\n    expect(asFragment()).toMatchSnapshot();\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 25,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 25,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}