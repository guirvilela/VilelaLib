{"version":3,"file":"main.061b04835e8f96a71622.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC5isources":["webpack://@hubert/docs/./src/1-guide/testing/2.mdx","webpack://@hubert/docs/./src/1-guide/testing/4.mdx","webpack://@hubert/docs/./src/1-guide/testing/5.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h2: \"h2\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    strong: \"strong\",\n    h4: \"h4\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Estrutura\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Estrutura dos testes\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Utilizamos essa seção para compartilhar conhecimento sobre desenvolvimento de testes.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Estrutura inicial do teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.img, {\n        src: \"/assets/img/tests-guide/guide-testing-folders-structure.png\",\n        alt: \"testid structure\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"no arquivo index.test.tsx, cole o código abaixo e siga as instruções.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [\"Substitua onde está \", _jsxDEV(_components.em, {\n            children: \"YourComponent\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 17,\n            columnNumber: 23\n          }, this), \" para seu componente\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 17,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"Selecione YourComponent, aperte CTRL + D até todos textos tiverem selecionados e cole o nome do componente\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 19,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 19,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"Ajuste a tipagem que estará dando erro provavelmente em YourComponentProps. São as tipagens do seu componente que esta no index.tsx\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 21,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 21,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 17,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useActionMock } from '@hubert/http';\\r\\nimport { I18nProvider } from '@hubert/i18n';\\r\\nimport { wrapse } from '@hubert/shared';\\r\\nimport { ThemeProvider } from '@hubert/styles';\\r\\nimport { render } from '@testing-library/react';\\r\\nimport { YourComponent } from '.';\\r\\n\\r\\ntype YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\r\\n\\r\\ndescribe('YourComponent component test', () => {\\r\\n  const defaultProps: YourComponentProps = {};\\r\\n\\r\\n  const renderComponent = (props?: Partial<YourComponentProps>) => {\\r\\n    return render(<YourComponent {...defaultProps} {...props} />, {\\r\\n      wrapper: wrapse(ThemeProvider, I18nProvider)\\r\\n    });\\r\\n  };\\r\\n\\r\\n  it('matches snapshot', () => {\\r\\n    const { asFragment } = renderComponent();\\r\\n    expect(asFragment()).toMatchSnapshot();\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 23,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 23,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Explicação da estrutura inicial de teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 49,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"YourComponentProps\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Define o tipo das propriedades do componente YourComponent baseado em seu tipo existente, garantindo que os testes estejam alinhados com a tipagem real.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 53,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"type YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 55,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 55,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"O describe agrupa testes relacionados para o componente YourComponent. Ele serve como um título para identificar esse grupo nos relatórios de teste.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 59,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"describe('YourComponent component test', () => {...})\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 61,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 61,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"defaultProps\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 65,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Define as propriedades padrão usadas para renderizar o componente nos testes. Aqui está vazio (\", \"), mas você pode adicionar valores padrão se necessário.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 67,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const defaultProps: YourComponentProps = {};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 69,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 69,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"Função de renderização auxiliar\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 73,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.strong, {\n        children: \"renderComponent\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 75,\n        columnNumber: 1\n      }, this), \": Função que encapsula a renderização do componente para reutilização nos testes. Aceita propriedades parciais para substituir os valores padrão.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 75,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.strong, {\n        children: \"render\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 77,\n        columnNumber: 1\n      }, this), \": Renderiza o componente usando os defaultProps e qualquer substituição passada.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 77,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.strong, {\n        children: \"wrapper\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 79,\n        columnNumber: 1\n      }, this), \": Usa a função wrapse para combinar os provedores ThemeProvider e I18nProvider, criando o contexto necessário para que o componente funcione corretamente.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 79,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const renderComponent = (props?: Partial<YourComponentProps>) => {\\r\\n  return render(<YourComponent {...defaultProps} {...props} />, {\\r\\n    wrapper: wrapse(ThemeProvider, I18nProvider)\\r\\n  });\\r\\n};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 81,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 81,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Teste de Snapshot\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 89,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('matches snapshot', () => {\\r\\n  const { asFragment } = renderComponent();\\r\\n  expect(asFragment()).toMatchSnapshot();\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 91,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 91,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"it: Define um caso de teste individual. Aqui, o teste verifica se o componente corresponde ao snapshot.\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 98,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 98,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"renderComponent: Renderiza o componente com a função auxiliar definida acima.\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 100,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 100,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"asFragment: Retorna o DOM do componente como um fragmento.\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 102,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 102,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: \"toMatchSnapshot: Compara o fragmento gerado com um snapshot salvo anteriormente. Se o DOM mudou, o teste falhará.\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 104,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 104,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 98,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Tipagens Especiais\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 106,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Usamos a tipagem do componente dentro da const defaultProps.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 108,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useActionMock } from '@hubert/http';\\r\\nimport { useFormMock, wrapse } from '@hubert/shared';\\r\\n\\r\\ntype YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\r\\n\\r\\nconst defaultProps: YourComponentProps = {\\r\\n  action: useActionMock(),\\r\\n  getAction: useActionMock(),\\r\\n  form: useFormMock<PostFunctionRequest>(),\\r\\n  formModal: useFormMock<FormModalStatus>(),\\r\\n  onFunction: jest.fn(),\\r\\n  onDeleteFile: jest.fn()\\r\\n};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 110,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 110,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"useActionMock()\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 126,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Tipagem para respostas de chamadas a API\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 128,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Mocka ações HTTP ou lógicas externas do componente, substituindo as funções reais por implementações simuladas.\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 130,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 130,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h4, {\n      children: \"Setando valores da actionMock()\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 132,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Ao setar os valores da Action, vai ser considerado nos testes os valores vindo do teste e não relacionado a nada da API.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 134,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useActionMock } from '@hubert/http';\\r\\n\\r\\ntype YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\r\\n\\r\\nconst defaultProps: YourComponentProps = {\\r\\n  action: useActionMock({\\r\\n    payload: {\\r\\n      condominio: 991,\\r\\n      unidade: 43659\\r\\n    },\\r\\n    loading: false\\r\\n  })\\r\\n};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 136,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 136,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"useFormMock()\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 152,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Mocka os formulários usados pelo componente.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 154,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"(index.tsx)\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 156,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"export interface YourComponentProps {\\r\\n  onFunction: () => void;\\r\\n}\\r\\n\\r\\nexport interface MyComponentForm {\\r\\n   condominio: number,\\r\\n   unidade: number\\r\\n}\\r\\n\\r\\nexport function YourComponent({onFunction}: YourComponent) {\\r\\n\\r\\nconst form = useForm<MyComponentForm>({\\r\\n  condominio: 0\\r\\n  unidade: 0\\r\\n})\\r\\n\\r\\nreturn (\\r\\n  <HubButton onClick={onFunction}>Continuar</HubButton>\\r\\n)}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 158,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 158,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { useFormMock } from '@hubert/shared';\\r\\n\\r\\ntype YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\r\\n\\r\\nconst defaultProps: YourComponentProps = {\\r\\n  form: useFormMock<MyComponentForm>({\\r\\n    value: {\\r\\n      condominio: 991,\\r\\n      unidade: 43659\\r\\n    }\\r\\n  })\\r\\n};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 180,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 180,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"Tipagem de Funções() \"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 195,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Usamos jest.fn(), para falar pro Jest que aquela prop é uma função que poderá ser chamada futuramente para testes\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 197,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"type YourComponentProps = React.YourComponentProps<typeof YourComponent>;\\r\\n\\r\\nconst defaultProps: YourComponentProps = {\\r\\n  onFunction: jest.fn()\\r\\n};\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 199,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 199,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: [\"Próximo passo... \", _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-primeiro-teste--page\",\n          children: \"Primeiro teste ✍🏻\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 207,\n          columnNumber: 20\n        }, this)]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 207,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 207,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.hr, {}, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 209,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Keep calm and code on 🤘.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 211,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Estrutura', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Funcoes\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Testar funções com Jest\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"Vamos testar o fechamento de um modal ao clicar em cancelar\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"export interface MyComponentForm {\\r\\n  modal: boolean;\\r\\n}\\r\\n\\r\\nexport function Component() {\\r\\n  const form = useForm<MyComponentForm>({\\r\\n    modal: false\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <HubModal\\r\\n      opened={form.value.modal}\\r\\n      data-testid=\\\"my-component-testid\\\"\\r\\n      header={t('my-component_modal-header')}\\r\\n      width={file ? '70vw' : '40vw'}\\r\\n      contentHeight=\\\"92vh\\\"\\r\\n      onClose={() => form.setAll({ modal: false })}\\r\\n      actions={\\r\\n        <HubGrid row cols={['4', '4', '4']}>\\r\\n          <div />\\r\\n          <HubButton\\r\\n            full\\r\\n            variant=\\\"ghost\\\"\\r\\n            onClick={() => form.setAll({ modal: false })}\\r\\n          >\\r\\n            {t('reuse_cancel')}\\r\\n          </HubButton>\\r\\n        </HubGrid>\\r\\n      }\\r\\n    />\\r\\n  );\\r\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('Should be able close modal when click on cancel button', () => {\\r\\n  const closeModalBtnMock = jest.fn();\\r\\n\\r\\n  const { getByText } = renderComponent({\\r\\n    form: useFormMock<MyComponentForm>({\\r\\n      value: {\\r\\n        modal: true\\r\\n      },\\r\\n      spySetAll: closeModalBtnMock\\r\\n    })\\r\\n  });\\r\\n\\r\\n  const modalCloseBtn = getByText('reuse_cancel');\\r\\n\\r\\n  fireEvent.click(modalCloseBtn);\\r\\n\\r\\n  expect(closeModalBtnMock).toHaveBeenCalledWith({ modal: false });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 46,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 46,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Explicação\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 67,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"prmeiro criamos uma variavel que vai ser a função que vamos chamar e observar se ela foi chamada no expect()\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 69,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 69,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const closeModalBtnMock = jest.fn();`\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 71,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 71,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Setamos as variaveis necessárias para o modal abrir\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 75,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: \"Passamos a função que será chamada no componente dentro da função, no caso formModalStatus.setAll(), então colocamos spySetAll: closeModalBtnMock, para observarmos se closeModalBtnMock vai ser chamada\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 76,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 75,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const { getByText } = renderComponent({\\r\\n  formModalStatus: useFormMock<MyComponentStatus>({\\r\\n    value: {\\r\\n      modal: true\\r\\n    },\\r\\n    spySetAll: closeModalBtnMock\\r\\n  })\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 78,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 78,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Pegamos através do texto do botão, o elemento de botão que será clicado e ao clicar, executar a função\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 89,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 89,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const modalCloseBtn = getByText('reuse_cancel');\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 91,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 91,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Usamos a função fireEvent.click(), para executar um clique no botão, passando por parâmetro, o botão que queremos clicar\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 95,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 95,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"fireEvent.click(modalCloseBtn);\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 97,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 97,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"Por Final esperamos que a função closeModalBtnMock, seja chamada pelo clique do botão e esperamos que tenha chamado com modal: false do jeito que o index.tsx necessita\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 101,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 101,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"expect(closeModalBtnMock).toHaveBeenCalledWith({ modal: false });\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 103,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 103,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: [\"Próximo passo... \", _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-inputs--page\",\n          children: \"Inputs ✍🏻\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 107,\n          columnNumber: 20\n        }, this)]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 107,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 107,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.hr, {}, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 109,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Keep calm and code on 🤘.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 111,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Funcoes', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Inputs\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Testar inputs com Jest\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"onChange do input\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"export interface MyComponentForm {\\r\\n  nome: string;\\r\\n}\\r\\n\\r\\nexport function Component() {\\r\\n  const form = useForm<MyComponentForm>({\\r\\n    nome: ''\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <HubTextField\\r\\n      data-testid=\\\"component-input-test\\\"\\r\\n      id=\\\"componentInput\\\"\\r\\n      required\\r\\n      placeholder={t('component-input-placeholder')}\\r\\n      value={form.value.nome}\\r\\n      onChange={(v) => form.set('nome', v)}\\r\\n    />\\r\\n  );\\r\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"No teste colocamos \\\"-input\\\" pois está configurado na lib que essa prop vai pegar a ref do input\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 34,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 34,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('should be able change change input', () => {\\r\\n  const useSetForm = jest.fn();\\r\\n\\r\\n  const { getByTestId } = renderComponent({\\r\\n    form: useFormMock<MyComponentForm>({ set: () => useSetForm })\\r\\n  });\\r\\n\\r\\n  const nameInput = getByTestId('component-input-test-input');\\r\\n\\r\\n  expect(nameInput).toBeInTheDocument();\\r\\n\\r\\n  fireEvent.change(nameInput, { target: { value: 'Academia' } });\\r\\n\\r\\n  expect(useSetForm).toBeCalledWith({\\r\\n    nome: 'Academia'\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 36,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 36,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Input de Radio\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 56,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubGrid row gap=\\\"3\\\">\\r\\n  <HubRadio\\r\\n    id=\\\"component-sindico-s\\\"\\r\\n    checked={form.value.radioComponent}\\r\\n    onClick={() =>\\r\\n      form.setAll({\\r\\n        radioComponent: true\\r\\n      })\\r\\n    }\\r\\n  >\\r\\n    <HubText typo=\\\"body2\\\" weight=\\\"600\\\">\\r\\n      {t('reuse_yes')}\\r\\n    </HubText>\\r\\n  </HubRadio>\\r\\n\\r\\n  <HubRadio\\r\\n    id=\\\"component-sindico-n\\\"\\r\\n    checked={!form.value.radioComponent}\\r\\n    onClick={() =>\\r\\n      form.setAll({\\r\\n        radioComponent: false\\r\\n      })\\r\\n    }\\r\\n  >\\r\\n    <HubText typo=\\\"body2\\\" weight=\\\"600\\\">\\r\\n      {t('reuse_no')}\\r\\n    </HubText>\\r\\n  </HubRadio>\\r\\n</HubGrid>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 58,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 58,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('Should be able click on radio true', () => {\\r\\n  const onMarkRadioMock = jest.fn();\\r\\n\\r\\n  const { getByText } = renderComponent({\\r\\n    isRpa: true,\\r\\n    form: useFormMock<MyComponentForm>({\\r\\n      value: 1,\\r\\n      spySetAll: onMarkRadioMock\\r\\n    })\\r\\n  });\\r\\n\\r\\n  const radioServico = getByText('reuse_yes');\\r\\n\\r\\n  fireEvent.click(radioServico);\\r\\n\\r\\n  expect(onMarkRadioMock).toHaveBeenCalledWith({\\r\\n    radioComponent: true\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 90,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 90,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 112,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 112,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 112,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.hr, {}, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 114,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Keep calm and code on 🤘.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 116,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Inputs', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}