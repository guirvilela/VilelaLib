{"version":3,"file":"main.81dc29960b4304a61ae2.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA","sources":["webpack://@hubert/docs/./src/1-guide/testing/5.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Inputs\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sum√°rio\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Testar inputs com Jest\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Vamos testar o onChange do input\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubTextField\\r\\n  data-testid=\\\"component-input-test\\\"\\r\\n  readOnly={!canEdit}\\r\\n  id=\\\"componentInput\\\"\\r\\n  required\\r\\n  placeholder={t('component-input-placeholder')}\\r\\n  value={formCreateArea.value.dados?.nome}\\r\\n  loading={configuracaoArea.loading}\\r\\n  onChange={(v) =>\\r\\n    formCreateArea.set('dados')({\\r\\n      ...formCreateArea.value.dados,\\r\\n      nome: v\\r\\n    })\\r\\n  }\\r\\n>\\r\\n  {t('component-input-label')}\\r\\n</HubTextField>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('should be able change areaName input', () => {\\r\\n  const useSetForm = jest.fn();\\r\\n  const { getByTestId } = renderComponent({\\r\\n    formCreateArea: useFormMock<AreasNewFormProps>({ set: () => useSetForm })\\r\\n  });\\r\\n  const textAreaNameInput = getByTestId('area_dados-nome-input');\\r\\n  expect(textAreaNameInput).toBeInTheDocument();\\r\\n\\r\\n  fireEvent.change(textAreaNameInput, { target: { value: 'Academia' } });\\r\\n\\r\\n  expect(useSetForm).toBeCalledWith({\\r\\n    nome: 'Academia'\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 31,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 31,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Input de Radio\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 48,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 48,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubGrid row gap=\\\"3\\\">\\r\\n  <HubRadio\\r\\n    id=\\\"component-sindico-s\\\"\\r\\n    checked={form.value.radioComponent}\\r\\n    onClick={() =>\\r\\n      form.setAll({\\r\\n        radioComponent: true\\r\\n      })\\r\\n    }\\r\\n  >\\r\\n    <HubText typo=\\\"body2\\\" weight=\\\"600\\\">\\r\\n      {t('reuse_yes')}\\r\\n    </HubText>\\r\\n  </HubRadio>\\r\\n\\r\\n  <HubRadio\\r\\n    id=\\\"component-sindico-n\\\"\\r\\n    checked={!form.value.radioComponent}\\r\\n    onClick={() =>\\r\\n      form.setAll({\\r\\n        radioComponent: false\\r\\n      })\\r\\n    }\\r\\n  >\\r\\n    <HubText typo=\\\"body2\\\" weight=\\\"600\\\">\\r\\n      {t('reuse_no')}\\r\\n    </HubText>\\r\\n  </HubRadio>\\r\\n</HubGrid>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 50,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('Should be able click on radio servico sindico', () => {\\r\\n  const onMarkRadioMock = jest.fn();\\r\\n\\r\\n  const { getByText } = renderComponent({\\r\\n    isRpa: true,\\r\\n    form: useFormMock<PutEditOPRequest>({\\r\\n      value: factoryContratosNewFormInitialValue(TipoCadastro.Contrato),\\r\\n      spySetAll: onMarkRadioMock\\r\\n    })\\r\\n  });\\r\\n\\r\\n  const radioServico = getByText('reuse_yes');\\r\\n\\r\\n  fireEvent.click(radioServico);\\r\\n\\r\\n  expect(onMarkRadioMock).toHaveBeenCalledWith({\\r\\n    radioComponent: true\\r\\n  });\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 82,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 82,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Inputs', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}