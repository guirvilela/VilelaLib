{"version":3,"file":"main.8520ac18d2ed138a6bab.hot-update.js","mappingssources":["webpack://@hubert/docs/./src/1-guide/testing/3.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\nimport {Fragment as _Fragment, jsxDEV as _jsxDEV} from \"react/jsx-dev-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {Meta} from '@storybook/addon-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(Meta, {\n      title: \"Guide/Testing/Primeiro teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 3,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.blockquote, {\n      children: [\"\\n\", _jsxDEV(_components.p, {\n        children: _jsxDEV(_components.a, {\n          href: \"/?path=/docs/guide-testing-summary--page\",\n          children: \"Voltar ao sumário\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 5,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 5,\n        columnNumber: 3\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 5,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Funções para identificar o componente\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Padrão Test ID para capturar elementos\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.img, {\n        src: \"/assets/img/tests-guide/guide-testing-testid.png\",\n        alt: \"testid pattern\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Para capturar elemtentos, usamos duas funções principais\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"getByText\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: \"getByTestId\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"getByText()\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Identifica o elemento através do texto que possui em seu children\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 20,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Exemplo:\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 22,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 22,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubText>Texto de exemplo</HubText>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 24,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 24,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"index.test.tsx\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 28,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const { getByText } = renderComponent();\\r\\n\\r\\nexpect(getByText('Texto de exemplo')).toBeInTheDocument();\\r\\n\\r\\n//toBeInTheDocument() verifica se o elemento está aparecendo em tela\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 30,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 30,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"getByTestId( )\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 38,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Identifica o elemento através da propriedade \\\"testId\\\", todos os componentes podem tere essa propriedade, como um ID de teste para aquele elemento.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 40,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Exemplo:\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 42,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"<HubGrid testId=\\\"mycomponent-test-grid\\\">{...}</HubGrid>\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 44,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"index.test.tsx\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 48,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 48,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"const { getByTestId } = renderComponent();\\r\\n\\r\\nexpect(getByTestId('mycomponent-test-grid')).toBeInTheDocument();\\r\\n\\r\\n//toBeInTheDocument() verifica se o elemento está aparecendo em tela\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 50,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Primeiro teste\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 58,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"Para o primeiro teste vamos fazer uma validação simples, se os textos estão sendo renderizados corretamente\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 60,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Compoente Principal (index.tsx)\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 62,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"export function MyComponent() {\\r\\n  const t = useI18nMessage();\\r\\n\\r\\n  return (\\r\\n    <HubCard pad={['2', '4']}>\\r\\n      <HubText typo=\\\"h1\\\">{t('my-component_translate-arquivos')}</HubText>\\r\\n\\r\\n      <HubText typo=\\\"h1\\\">{t('my-component_translate-andamento')}</HubText>\\r\\n\\r\\n      <HubText typo=\\\"h1\\\">{t('my-component_translate-historico')}</HubText>\\r\\n\\r\\n      <HubText typo=\\\"h1\\\">{t('my-component_translate-imposto')}</HubText>\\r\\n    </HubCard>\\r\\n  );\\r\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 64,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 64,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: \"index.test.tsx\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 82,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 82,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-typescript\",\n        children: \"it('Should be able renders component with correct texts', () => {\\r\\n  const renderComponent = (props?: Partial<MyComponentProps>) => {\\r\\n    return render(<MyComponent {...defaultProps} {...props} />, {\\r\\n      wrapper: wrapse(ThemeProvider, I18nProvider)\\r\\n    });\\r\\n  };\\r\\n\\r\\n  const { getByText } = renderComponent();\\r\\n\\r\\n  expect(getByText('my-component_translate-arquivos')).toBeInTheDocument();\\r\\n  expect(getByText('my-component_translate-detalhes')).toBeInTheDocument();\\r\\n  expect(getByText('my-component_translate-andamento')).toBeInTheDocument();\\r\\n  expect(getByText('my-component_translate-imposto')).toBeInTheDocument();\\r\\n});\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 84,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 84,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\n// =========\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Guide/Testing/Primeiro teste', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}